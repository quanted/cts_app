// Generated by CoffeeScript 1.3.3
var _globalXML = {};
var _globalChems = {};

function dyn_Table() {
  var AddRemoveApiView, ApiDataConversion, ApiDataNormalization, Chemical, DynamicTable, DynamicTableView, Eventable, Model, ModuleObject, Property, PropertyDivView, PropertyTabView, View, Viewable, extend, include, moduleKeywords, _base, _base1, _ref, _ref1, _ref2, __indexOf = [].indexOf ||
  function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if ( i in this && this[i] === item)
        return i;
    }
    return -1;
  }, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };

  if (( _ref = ( _base = Array.prototype).indexOf) == null) {
    _base.indexOf = function(obj, fromIndex) {
      var i, _i, _ref1;
      if (fromIndex === null) {
        fromIndex = 0;
      } else if (fromIndex < 0) {
        fromIndex = Math.max(0, this.length + fromIndex);
      }
      for ( i = _i = fromIndex, _ref1 = this.length; fromIndex <= _ref1 ? _i < _ref1 : _i > _ref1; i = fromIndex <= _ref1 ? ++_i : --_i) {
        if (this[i] === obj) {
          return i;
        }
      }
      return -1;
    };
  }

  extend = function(obj, mixin) {
    var method, name, _results;
    _results = [];
    for (name in mixin) {
      method = mixin[name];
      _results.push(obj[name] = method);
    }
    return _results;
  };

  include = function(klass, mixin) {
    return extend(klass.prototype, mixin);
  };

  moduleKeywords = ['extended', 'included'];

  ModuleObject = (function() {

    function ModuleObject() {
    }


    ModuleObject.extend = function(obj) {
      var key, value, _ref1;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this[key] = value;
        }
      }
      if (( _ref1 = obj.extended) != null) {
        _ref1.apply(this);
      }
      return this;
    };

    ModuleObject.include = function(obj) {
      var key, value, _ref1;
      for (key in obj) {
        value = obj[key];
        if (__indexOf.call(moduleKeywords, key) < 0) {
          this.prototype[key] = value;
        }
      }
      if (( _ref1 = obj.included) != null) {
        _ref1.apply(this);
      }
      return this;
    };

    return ModuleObject;

  })();

  Viewable = {
    render : function() {
      this.jQueryel.html(this.template());
      return this;
    },
    remove : function() {
      this.jQueryel.remove();
      return this;
    },
    template : function() {
      return jQuery(this.tmpl_id).tmpl(this.model);
    }
  };

  Eventable = {
    bind : function(events, callback, context) {
      var calls, event, list, node, tail, _ref1;
      if (!callback) {
        return this;
      }
      events = events.split(/\s+/);
      if (( _ref1 = this.callbacks) == null) {
        this.callbacks = {};
      }
      calls = this.callbacks;
      while ( event = events.shift()) {
        list = calls[event];
        node = list ? list.tail : {};
        node.next = tail = {};
        node.context = context;
        node.callback = callback;
        calls[event] = {
          tail : tail,
          next : list ? list.next : node
        };
      }
      return this;
    },
    unbind : function(events, callback, context) {
      var calls, cb, ctx, event, key, node, tail;
      if (!( calls = this.callbacks)) {
        return;
      }
      if (!(events || callback || context)) {
        delete this.callbacks;
        return this;
      }
      if (events) {
        events = events.split(/\s+/);
      } else {
        events = [];
        for (key in calls) {
          events.push(key);
        }
      }
      while ( event = events.shift()) {
        node = calls[event];
        delete calls[event];
        if (!node || !(callback || context)) {
          continue;
        }
        tail = node.tail;
        while (( node = node.next) !== tail) {
          cb = node.callback;
          ctx = node.context;
          if ((callback && cb !== callback) || (context && ctx !== context)) {
            this.bind(event, cb, ctx);
          }
        }
      }
      return this;
    },
    fire : function(events) {
      var all, args, calls, event, node, rest, tail;
      if (!( calls = this.callbacks)) {
        return this;
      }
      all = calls.all;
      events = events.split(/\s+/);
      rest = Array.prototype.slice.call(arguments, 1);
      while ( event = events.shift()) {
        if ( node = calls[event]) {
          tail = node.tail;
          while (( node = node.next) !== tail) {
            node.callback.apply(node.context || this, rest);
          }
        }
        if ( node = all) {
          tail = node.tail;
          args = [event].concat(rest);
          while (( node = node.next) !== tail) {
            node.callback.apply(node.context || this, args);
          }
        }
      }
      return this;
    }
  };

  View = (function(_super) {

    __extends(View, _super);

    View.include(Viewable);

    function View(model) {
      this.model = model;
      this.model.bind("updated", this.render, this);
      if ( typeof this.jQueryel === 'undefined') {
        if ( typeof this.tag !== 'undefined') {
          this.jQueryel = jQuery(this.tag);
        }
      }
    }

    return View;

  })(ModuleObject);

  Model = (function(_super) {

    __extends(Model, _super);

    Model.include(Eventable);

    function Model() {
    }


    Model.prototype.updated = function() {
      return this.fire("updated");
    };

    return Model;

  })(ModuleObject);

  Chemical = (function(_super) {

    __extends(Chemical, _super);

    function Chemical(iupac, smiles, apiValueMap) {
      this.iupac = iupac;
      this.smiles = smiles;
      this.apiValueMap = apiValueMap;
    }


    Chemical.prototype.addApi = function(apiname, value) {
      return this.apiValueMap[apiname] = value;
    };

    Chemical.prototype.removeApi = function(apiname) {
      return delete this.apiValueMap[apiname];
    };

    Chemical.prototype.getApiNames = function() {
      var k, _apis;
      _apis = [];
      for (k in this.apiValueMap) {
        _apis.push(k);
      }
      return _apis;
    };

    Chemical.prototype.getApiValueMap = function() {
      return this.apiValueMap;
    };

    Chemical.prototype.getChemicalIupac = function() {
      return this.iupac;
    };

    Chemical.prototype.getChemicalSmiles = function() {
      return this.smiles;
    };

    Chemical.prototype.getMin = function() {
      var minVal, name, value, _ref1;
      minVal = null;
      _ref1 = this.apiValueMap;
      for (name in _ref1) {
        value = _ref1[name];
        if (value !== null) {
          if (minVal === null) {
            minVal = value;
          } else if (value < minVal) {
            minVal = value;
          }
        }
      }
      if (minVal === null)
      {
        return null
      } else {
        var val = (minVal).toFixed(2);
        return val;
      }
    };

    Chemical.prototype.getMax = function() {
      var maxVal, name, value, _ref1;
      maxVal = null;
      _ref1 = this.apiValueMap;
      for (name in _ref1) {
        value = _ref1[name];
        if (value !== null) {
          if (maxVal === null) {
            maxVal = value;
          } else if (value > maxVal) {
            maxVal = value;
          }
        }
      }
      if (maxVal === null)
      {
        return null
      } else {
        var val = (maxVal).toFixed(2);
        return val;
      }
    };

    Chemical.prototype.getMean = function() {
      var name, totalVal, valNum, value, _ref1;
      valNum = 0;
      totalVal = null;
      _ref1 = this.apiValueMap;
      for (name in _ref1) {
        value = _ref1[name];
        if (value !== null) {
          valNum++;
          totalVal += value;
        }
      }
      if (totalVal === 0) {
        return null;
      } else {
        var val = (totalVal / valNum).toFixed(2);
        return val;
      }
    };

    return Chemical;

  })(Model);

  Property = (function(_super) {

    __extends(Property, _super);

    function Property(propertyName, chemicals) {
      var _ref1;
      this.propertyName = propertyName;
      this.chemicals = chemicals != null ? chemicals : [];
      if (( _ref1 = Property.inc_id) == null) {
        Property.inc_id = 1;
      }
      this.id = Property.inc_id;
      Property.inc_id++;
    }


    Property.prototype.addChemical = function(chemical) {
      if (this.chemicals.indexOf(chemical) === -1) {
        return this.chemicals.push(chemical);
      }
    };

    Property.prototype.getApiNames = function() {
      var apiName, apiNames, chemical, _i, _j, _len, _len1, _ref1, _ref2;
      apiNames = [];
      _ref1 = this.chemicals;
      for ( _i = 0, _len = _ref1.length; _i < _len; _i++) {
        chemical = _ref1[_i];
        _ref2 = chemical.getApiNames();
        for ( _j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          apiName = _ref2[_j];
          if (apiNames.indexOf(apiName) === -1) {
            apiNames.push(apiName);
          }
        }
      }
      return apiNames;
    };

    Property.prototype.getPropertyName = function() {
      return this.propertyName;
    };

    Property.prototype.getId = function() {
      return this.id;
    };

    Property.prototype.eachChemical = function(fn) {
      var chemical, _i, _len, _ref1, _results;
      _ref1 = this.chemicals;
      _results = [];
      for ( _i = 0, _len = _ref1.length; _i < _len; _i++) {
        chemical = _ref1[_i];
        _results.push(fn(chemical));
      }
      return _results;
    };

    Property.prototype.getChemicals = function() {
      return this.chemicals;
    };

    return Property;

  })(Model);

  DynamicTable = (function(_super) {

    __extends(DynamicTable, _super);

    function DynamicTable(properties) {
      var _ref1;
      this.properties = properties != null ? properties : [];
      if (( _ref1 = DynamicTable.inc_id) == null) {
        DynamicTable.inc_id = 1;
      }
      this.id = DynamicTable.inc_id;
      DynamicTable.inc_id++;
    }


    DynamicTable.prototype.getId = function() {
      return this.id;
    };

    DynamicTable.prototype.getProperties = function() {
      return this.properties;
    };

    DynamicTable.prototype.eachProperty = function(fn) {
      var property, _i, _len, _ref1, _results;
      _ref1 = this.properties;
      _results = [];
      for ( _i = 0, _len = _ref1.length; _i < _len; _i++) {
        property = _ref1[_i];
        _results.push(fn(property));
      }
      return _results;
    };

    DynamicTable.prototype.addProperty = function(property) {
      return this.properties.push(property);
    };

    DynamicTable.prototype.removeProperty = function(property) {
      var index;
      index = this.properties.indexOf(property);
      if (index !== -1) {
        return this.properties.splice(index, 1);
      }
    };

    return DynamicTable;

  })(Model);

  DynamicTableView = (function(_super) {

    __extends(DynamicTableView, _super);

    DynamicTableView.prototype.tag = '<div></div>';

    function DynamicTableView(model, apis) {
      var api, _i, _len;
      this.model = model;
      DynamicTableView.__super__.constructor.call(this, this.model);
      this.apiViews = {};
      for ( _i = 0, _len = apis.length; _i < _len; _i++) {
        api = apis[_i];
        this.addApi(api);
      }
      this.jQueryel = jQuery(this.tag);
      this.jQueryel.attr("id", "dynamic-table-" + this.model.getId());
      this.model.eachProperty(function(property) {
        var propertyView, tabView;
        propertyView = new PropertyDivView(property);
        return tabView = new PropertyTabView(property);
      });
    }


    DynamicTableView.prototype.addApi = function(api) {
      var view;
      view = new AddRemoveApiView(this.model, api);
      this.apiViews[api['name']] = view;
      return jQuery('#api-toolbar').find("ul").append(view.render().element());
    };

    DynamicTableView.prototype.removeApi = function(name) {
      this.apiViews[name].remove();
      return delete this.apiViews[name];
    };

    DynamicTableView.prototype.render = function() {
      var container, selected;
      container = jQuery("<div><ul></ul></div>");
      this.model.eachProperty(function(property) {
        var propertyView, tabView;
        tabView = new PropertyTabView(property);
        container.find("ul").append(tabView.render().element());
        propertyView = new PropertyDivView(property);
        return container.append(propertyView.render().element());
      });
      selected = this.jQueryel.tabs('option', 'selected');
      this.jQueryel.html(container.html());
      this.jQueryel.tabs("destroy");
      this.jQueryel.tabs();
      this.jQueryel.tabs("select", selected);
      return this;
    };

    DynamicTableView.prototype.element = function() {
      return this.jQueryel;
    };

    return DynamicTableView;

  })(View);

  AddRemoveApiView = (function(_super) {

    __extends(AddRemoveApiView, _super);

    AddRemoveApiView.prototype.add_tmpl_id = "#dynamic-add-api-button_tmpl";

    AddRemoveApiView.prototype.remove_tmpl_id = "#dynamic-remove-api-button_tmpl";

    AddRemoveApiView.prototype.tag = '<li class="dynamic-table-api-button"></li>';

    function AddRemoveApiView(dynamicTable, model) {
      var _this = this;
      //var d = "?d=" + new Date().getTime();
      this.dynamicTable = dynamicTable;
      this.model = model;
      this.tmpl = this.add_tmpl_id;
      this.jQueryel = jQuery(this.tag);
        this.jQueryel.on("click", "a.dynamic-table-add-api", function() {
        /* put chem keys(smiles and iupac and env) */
        jQuery.ajax({
          type : "GET",
          data : {
            smile : list,
            T : jQuery('#T').val(),
            pH : jQuery('#pH').val(),
            sFe : jQuery('#sFe').val(),
            foc : jQuery('#foc').val()
          },
          cache: false,
          url : _this.model["url"],
          success : function(xml) {
            var apiData;
            apiData = ApiDataConversion.xmlToApiData(xml);
            return _this.enableApi(apiData);
          },
          error : function(jqXHR, textStatus, errorThrown) {
            var bool;
            return bool = true;
          }
        });
        return false;
      });
      this.jQueryel.on("click", "a.dynamic-table-remove-api", function() {
        _this.disableApi();
        return false;
      });
    }


    AddRemoveApiView.prototype.template = function() {
      return jQuery(this.tmpl).tmpl(this.model);
    };

    AddRemoveApiView.prototype.element = function() {
      return this.jQueryel;
    };

    AddRemoveApiView.prototype.enableApi = function(apiData) {
      ApiDataNormalization.addApiDataToTable(apiData, this.dynamicTable);
      this.tmpl = this.remove_tmpl_id;
      this.render();
      return this;
    };

    AddRemoveApiView.prototype.disableApi = function() {
      var name, apiName, _ref1;
      _ref1 = _globalXML
      for (name in _ref1) {
        var xml;
        xml = _globalXML[name];
        apiName = jQuery(xml).find("apiName").text();
        if (name.search(this.model["name"]) > -1) {
          ApiDataNormalization.removeApiFromDynamicTable(apiName, this.dynamicTable);
        }
      }
      this.tmpl = this.add_tmpl_id;
      this.render();
      return this;
    };

    return AddRemoveApiView;

  })(View);

  PropertyTabView = (function(_super) {

    __extends(PropertyTabView, _super);

    PropertyTabView.prototype.tmpl_id = "#dynamic-property-tab_tmpl";

    PropertyTabView.prototype.tag = "<li></li>";

    function PropertyTabView(model) {
      this.model = model;
      PropertyTabView.__super__.constructor.call(this, this.model);
    }


    PropertyTabView.prototype.element = function() {
      return this.jQueryel;
    };

    return PropertyTabView;

  })(View);

  PropertyDivView = (function(_super) {

    __extends(PropertyDivView, _super);

    PropertyDivView.prototype.tmpl_id = "#dynamic-property-div_tmpl";

    PropertyDivView.prototype.tag = '<div class="ui-tabs-hide"></div>';

    function PropertyDivView(model) {
      this.model = model;
      PropertyDivView.__super__.constructor.call(this, this.model);
      this.jQueryel.attr("id", "property-" + this.model.getId());
    }


    PropertyDivView.prototype.element = function() {
      return this.jQueryel;
    };

    return PropertyDivView;

  })(View);

  ApiDataConversion = {
    xmlToApiData : function(xml) {
      _globalChems = xml;
      var apiData;
      apiData = {};
      jQuery(xml).find("properties").each(function() {
        var properties, apiName;
        properties = {};
        apiName = jQuery(this).find("apiName").text();
        if (_globalXML[apiName] == null) {
          _globalXML[apiName] = this;
        }
        jQuery(this).find("property").each(function() {
          var chemicals, propertyName;
          chemicals = {};
          propertyName = jQuery(this).find("name").text();
          jQuery(this).find("chemical").each(function() {
            var chemicalIupac, chemicalSmiles, chemicalValue, values;
            values = {};
            chemicalIupac = jQuery(this).find("iupac").text();
            if (chemicalIupac in GUI.chemicalList)
            {
              chemicalSmiles = jQuery(this).find("smiles").text();
              chemicalValue = parseFloat(jQuery(this).find("value").text());
              values[0] = chemicalValue;
              values[1] = chemicalSmiles;
              if (isNaN(chemicalValue) === true) {
                values[0] = null;
              }
              return chemicals[chemicalIupac] = values;
            }
          });
          return properties[propertyName] = chemicals;
        });
        return apiData[apiName] = properties;
      });
      return apiData;
    }
  };

  ApiDataNormalization = {
    addApiDataToTable : function(apiData, dynamicTable) {
      var apiName, properties, propertyChemicals, propertyName;
      for (apiName in apiData) {
        properties = apiData[apiName];

        dynamicTable.eachProperty(function(property) {
          var propertyChemicals;
          if (property.getPropertyName() in properties) {
            propertyChemicals = properties[property.getPropertyName()];
            ApiDataNormalization.addApiPropertyDataToProperty(apiName, propertyChemicals, property);
            return delete properties[property.getPropertyName()];
          }
        });
        for (propertyName in properties) {
          propertyChemicals = properties[propertyName];
          ApiDataNormalization.addPropertyDataToTable(apiName, propertyName, propertyChemicals, dynamicTable);
        }
      }
      return dynamicTable.updated();
    },

    addApiPropertyDataToProperty : function(apiName, propertyChemicals, property) {
      property.eachChemical(function(chemical) {
        var chemicalValue, values;
        if (chemical.getChemicalIupac() in propertyChemicals) {
          values = propertyChemicals[chemical.getChemicalIupac()];
          chemicalValue = values[0];
          chemicalSmiles = values[1];
          chemical.addApi(apiName, chemicalValue);
          return delete propertyChemicals[chemical.getChemicalIupac()];
        } else {
          chemicalValue = null; //0.0;
          return chemical.addApi(apiName, chemicalValue);
        }
      });

      var chemicalIupac, chemicalSmiles, chemicalValue, values, _results;
      _results = [];
      for (chemicalIupac in propertyChemicals) {
        values = propertyChemicals[chemicalIupac];
        chemicalValue = values[0];
        chemicalSmiles = values[1];
        _results.push(ApiDataNormalization.addChemicalDataToProperty(apiName, property, chemicalIupac, chemicalValue, chemicalSmiles));
      }
      return _results;
    },

    addPropertyDataToTable : function(apiName, propertyName, propertyChemicals, dynamicTable) {
      var chemicalIupac, chemicalSmiles, chemicalValue, property, values;
      property = new Property(propertyName, []);
      for (chemicalIupac in GUI.chemicalList) {
        if (chemicalIupac in propertyChemicals) {
          values = propertyChemicals[chemicalIupac];
          chemicalValue = values[0];
          chemicalSmiles = values[1];
        } else {
          chemicalValue = null; //0.0;
          chemicalSmiles = GUI.chemicalList[chemicalIupac];
        }
        ApiDataNormalization.addChemicalDataToProperty(apiName, property, chemicalIupac, chemicalValue, chemicalSmiles);
      }
      return dynamicTable.addProperty(property);
    },

    addChemicalDataToProperty : function(apiName, property, chemicalIupac, chemicalValue, chemicalSmiles) {
      var apiValueMap, chemical;
      apiValueMap = {};
      apiValueMap[apiName] = chemicalValue;
      chemical = new Chemical(chemicalIupac, chemicalSmiles, apiValueMap);
      return property.addChemical(chemical);
    },

    removeApiFromDynamicTable : function(apiName, dynamicTable) {
      dynamicTable.eachProperty(function(property) {
        _globalXML[apiName] = undefined;
        return ApiDataNormalization.removeApiFromProperty(apiName, property);
      });
      return dynamicTable.updated();
    },

    removeApiFromProperty : function(apiName, property) {
      return property.eachChemical(function(chemical) {
        return chemical.removeApi(apiName);
      });
    }
  };

  if (( _ref1 = window.App) == null) {
    window.App = {};
  }

  if (( _ref2 = ( _base1 = window.App).dynamic_table) == null) {
    _base1.dynamic_table = new DynamicTable;
  }



  window.App.Apis = [{
    name : "EPI",
    url : "episuite.jsp"
//  }, {
//    name : "SPARC",
//    url : "./test2.xml"
  }, {
    name : "ChemAxon",
    url : "chemaxoncalc.jsp"
    //      url: "./test3.xml"
  }];

  var _base2, _ref3;
  if (( _ref3 = ( _base2 = window.App).dynamic_table_view) == null) {
    _base2.dynamic_table_view = new DynamicTableView(window.App.dynamic_table, window.App.Apis);
  }
  return jQuery('#main').append(window.App.dynamic_table_view.element());

}
